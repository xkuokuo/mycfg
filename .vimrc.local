" Enable mouse
set mouse=r

" While I can't change where I live but at least I can change my vim color
" classic, confortable, feels like 1950s
colorscheme gruvbox
" colorscheme tender
"
" kind of like playing games on a arcade machine
" colorscheme OceanicNext
"
" very sharp: 
" colorscheme badwolf


" Set up keybindings that update scrollbar state.
"noremap <Down> 5jzz <bar> :call RefreshScrollbar()<CR>
autocmd CursorMoved * call RefreshScrollbar()
" autocmd CursorMovedI * call RefreshScrollbar()
" autocmd TextChanged * call RefreshScrollbar()
" autocmd TextChangedI * call RefreshScrollbar()
autocmd BufWritePost * call RefreshScrollbar()
autocmd BufEnter * highlight Scrollbar_Clear ctermfg=yellow ctermbg=black guifg=yellow guibg=black cterm=none
autocmd BufEnter * highlight Scrollbar_Thumb ctermfg=darkyellow ctermbg=darkyellow guifg=darkyellow guibg=black cterm=reverse
nnoremap <silent> zz zz <bar><bar> :call RefreshScrollbar()<CR>
nnoremap <silent> zb zb <bar><bar> :call RefreshScrollbar()<CR>
nnoremap <silent> zt zt <bar><bar> :call RefreshScrollbar()<CR>

" Set highlighting scheme. (User can override these!)

" Language specific settings
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype c setlocal fdm=syntax

" Golang
if count(g:spf13_bundle_groups, 'go')
    " Disabel this trouble maker
    let g:spf13_keep_trailing_whitespace = 1

    " Disabel the slow syntastic_go checker
    let g:syntastic_go_checkers = []
    let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

    " While this is a dirty trick, use ALE for most of the work, use vim-go for the fmt fixer
    " let g:go_fmt_autosave = 1
    let g:ale_go_gofmt_options = '-s'

    " ALE error and warning signs.
    let g:ale_sign_error = '⤫'
    let g:ale_sign_warning = '⚠'
    " let g:ale_linters = {'go': ['govet', 'gofmt', 'golint']}
    let g:ale_linters = {'go': ['govet', 'gofmt']}
    nnoremap <silent> <F2> :ALENext<cr>
    nnoremap <silent> <F3> :ALEPrevious<cr>
    " While golangci-lint is great, however for reason I don't know why it's broken on my mac
    " let g:ale_linters = {'go': ['golangci-lint']}
    " let g:ale_go_golangci_lint_options = ''

    autocmd Filetype go setlocal fdm=syntax
    autocmd Filetype go nmap <Leader>d <Plug>(go-def-vertical)
endif

if count(g:spf13_bundle_groups, 'python')
    autocmd Filetype python setlocal fdm=indent
    let g:pymode_rope_lookup_project = 1
    let g:pymode_rope = 1
    let g:pymode_rope_completion = 1
    let g:pymode_rope_autoimport = 1
    let g:pymode_rope_autoimport_modules = 1
    let g:pymode_rope_goto_definition_bind = '<Leader>d'
    let g:pymode_rope_goto_definition_cmd = 'vnew'
end

" Automatically adjust vim window size
autocmd VimResized * wincmd =

" For people hate the new macbook touchbar
inoremap jj <Esc>
" inoremap jj <Esc> <bar><bar> :wa<CR>
" noremap dd dd <bar><bar> :wa<CR>

" Move up/down faster
noremap <Up> 5kzz
noremap <Down> 5jzz

command Jsonformat %!python -m json.tool

" Ack config
" Ack highlight
let g:ackhighlight = 1
" Use ag for ack
if executable('ag')
    let g:ackprg = 'ag --nogroup --nocolor --column'
endif
" Everybody loves ag
" cnoremap ag Ack!

" Easily shift between windows
map <C-J> <C-W>j
map <C-K> <C-W>k

" Easily adjust window size
nnoremap <silent> <Leader>= :exe "vertical resize " . (winwidth(0) * 4/3)<CR>
nnoremap <silent> <Leader>- :exe "vertical resize " . (winwidth(0) * 3/4)<CR>
